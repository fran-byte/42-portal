## üîπ 1. Fundamentos previos (antes de atacar libft)

### üìå Objetivo:

Tener **todas las herramientas t√©cnicas y conceptuales** necesarias para empezar Libft **con confianza**, evitando errores comunes y entendiendo **lo que est√°s haciendo y por qu√©**.

---

### üõ†Ô∏è C√≥mo compilar en C (`gcc`, flags, `Makefile`)

#### ‚úÖ ¬øQu√© es compilar?

Es el proceso de transformar tu c√≥digo fuente `.c` en **c√≥digo m√°quina ejecutable**. El compilador m√°s usado en 42 es `gcc`.

#### üîß ¬øQu√© es `gcc` y c√≥mo se usa?

```bash
gcc -Wall -Wextra -Werror archivo.c -o ejecutable
```

* **`-Wall`**: muestra los *warnings* est√°ndar.
* **`-Wextra`**: muestra m√°s advertencias.
* **`-Werror`**: convierte los *warnings* en errores (esto te obliga a escribir c√≥digo limpio).
* **`-o`**: indica el nombre del archivo ejecutable resultante.

> ‚ö†Ô∏è En los proyectos de 42, **estos flags son obligatorios**, y tu c√≥digo debe compilar **sin ning√∫n warning**.

---

#### üß± ¬øQu√© es un Makefile?

Un **Makefile** es un script que automatiza el proceso de compilaci√≥n. En lugar de escribir varios comandos manualmente, defines reglas que lo hacen por ti. Es obligatorio en Libft.

#### üß™ Ejemplo b√°sico de Makefile para Libft:

```make
NAME = libft.a
SRC = ft_strlen.c ft_isalpha.c
OBJ = $(SRC:.c=.o)

CC = cc
CFLAGS = -Wall -Wextra -Werror

all: $(NAME)

$(NAME): $(OBJ)
	ar rcs $(NAME) $(OBJ)

clean:
	rm -f $(OBJ)

fclean: clean
	rm -f $(NAME)

re: fclean all
```

* **`ar rcs`**: crea la librer√≠a est√°tica (`.a`)
* **Reglas obligatorias**: `all`, `clean`, `fclean`, `re`, y `$(NAME)`
* **No debe hacer relink**: no compiles m√°s veces de lo necesario

---

### üì¶ Qu√© es una librer√≠a est√°tica (`.a`)

Una **librer√≠a est√°tica** es un archivo que **contiene c√≥digo ya compilado**, listo para reutilizar. En vez de copiar funciones en cada nuevo proyecto, puedes simplemente enlazar tu `libft.a`.

#### üìå ¬øC√≥mo se usa?

1. La creas con:

```bash
ar rcs libft.a ft_strlen.o ft_isalpha.o ...
```

2. La usas as√≠:

```bash
gcc main.c -L. -lft -o programa
```

* `-L.` le dice a gcc que busque librer√≠as en el directorio actual
* `-lft` busca `libft.a` (se le quita el "lib" y el ".a")

---

### üìö Uso de `man` y documentaci√≥n oficial

#### ‚úÖ ¬øQu√© es `man`?

`man` viene de "manual". Te muestra la documentaci√≥n de funciones del sistema.

Por ejemplo:

```bash
man strlen
```

Te mostrar√°:

* El prototipo: `size_t strlen(const char *s);`
* Qu√© hace: cuenta los caracteres hasta `\0`
* Qu√© devuelve: un n√∫mero (`size_t`)
* Qu√© errores puede devolver: en este caso, ninguno

#### üß† ¬øPor qu√© es vital en 42?

Debes **reimplementar funciones est√°ndar**, como `memcpy`, `strchr`, etc. El *man* es la fuente oficial para saber c√≥mo deben comportarse **exactamente**.

---

### üß¨ Anatom√≠a de una funci√≥n en C

Vamos a desglosar una funci√≥n paso a paso:

```c
int ft_strlen(const char *s)
{
    int i = 0;
    while (s[i])
        i++;
    return i;
}
```

#### Partes clave:

* `int`: tipo de retorno. La funci√≥n devuelve un n√∫mero.
* `ft_strlen`: nombre de la funci√≥n. Todas tus funciones deben empezar con `ft_`.
* `const char *s`: par√°metro de entrada. Es una cadena que **no vas a modificar**.
* `{ ... }`: el cuerpo de la funci√≥n.
* `while (s[i])`: recorre la cadena hasta encontrar `\0`.
* `return i`: devuelve la longitud.

> ‚ú® Recomendaci√≥n: antes de escribir el c√≥digo, **piensa la l√≥gica en espa√±ol o pseudoc√≥digo**.

---

### üßæ Tipos de datos est√°ndar

| Tipo     | Significado                         | Ejemplo               |
| -------- | ----------------------------------- | --------------------- |
| `int`    | Entero (positivo o negativo)        | `int x = -42;`        |
| `char`   | Car√°cter (letra, n√∫mero, s√≠mbolo)   | `char c = 'A';`       |
| `void`   | Sin tipo / no devuelve nada         | `void ft_print(void)` |
| `size_t` | Tama√±o sin signo (usado en strings) | `size_t len = 5;`     |

#### üìå ¬øQu√© es `size_t`?

Es un tipo sin signo (positivo) usado para tama√±os de memoria y longitudes.

Por ejemplo:

```c
size_t ft_strlen(const char *s);
```

Usarlo te evita errores con valores negativos y te garantiza portabilidad (en 32 o 64 bits).

---

### üîó Punteros y arrays b√°sicos

#### ‚úÖ ¬øQu√© es un puntero?

Un puntero es una variable que **guarda la direcci√≥n de otra variable**.

```c
int x = 10;
int *p = &x;  // p apunta a x
```

Puedes acceder al valor de `x` a trav√©s del puntero:

```c
printf("%d\n", *p);  // imprime 10
```

---

#### ‚úÖ ¬øY un array?

Un array es una **colecci√≥n de elementos del mismo tipo en memoria contigua**.

```c
char saludo[] = "Hola";
```

Esto es casi igual a:

```c
char *saludo = "Hola";
```

En ambos casos, `saludo[0]` vale `'H'`, `saludo[1]` vale `'o'`, etc.

---

#### üìå Relaci√≥n con Libft:

Muchas funciones de Libft usan punteros:

* `const char *s` ‚Üí apunta al comienzo de una cadena
* `char *dst, const char *src` ‚Üí para copiar datos
* `void *b` ‚Üí para funciones gen√©ricas (como `memset`)

> Entender bien c√≥mo funcionan punteros y arrays es **clave** para no tener errores como segfaults o buffer overflows.

---

### üß† Consejos pr√°cticos

* **Haz pruebas peque√±as en archivos separados** antes de integrar en tu libft.
* Usa `valgrind` para detectar errores de memoria (especialmente m√°s adelante con `malloc`).
* Lee los `man` antes de empezar cada funci√≥n, **aunque creas saber lo que hacen**.
* Empieza implementando funciones **sencillas** (como `ft_isalpha`) para familiarizarte.
* Usa `printf` para depurar. No tengas miedo de imprimir valores para entenderlos.

